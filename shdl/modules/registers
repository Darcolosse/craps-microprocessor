module registers(rst, clk, areg[4..0], breg[4..0], dreg[4..0], dbus[31..0] : abus[31..0], bbus[31..0], ir[31..0])
    decoder5to32(dreg[4..0] : ddreg[31..0])
    decoder5to32(areg[4..0] : aareg[31..0])
    decoder5to32(breg[4..0] : bbreg[31..0])
    
    // Register r0, always equal to zero
    abus[31..0] = "00000000000000000000000000000000" output enabled when aareg[0]
    bbus[31..0] = "00000000000000000000000000000000" output enabled when bbreg[0]
    
    // Register r1, data
    r1[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[1]
    abus[31..0] = r1[31..0] output enabled when aareg[1]
    bbus[31..0] = r1[31..0] output enabled when bbreg[1]
    
    // Register r2, data
    r2[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[2]
    abus[31..0] = r2[31..0] output enabled when aareg[2]
    bbus[31..0] = r2[31..0] output enabled when bbreg[2]
    
    // Register r3, data
    r3[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[3]
    abus[31..0] = r3[31..0] output enabled when aareg[3]
    bbus[31..0] = r3[31..0] output enabled when bbreg[3]
    
    // Register r4, data
    r4[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[4]
    abus[31..0] = r4[31..0] output enabled when aareg[4]
    bbus[31..0] = r4[31..0] output enabled when bbreg[4]
    
    // Register r5, data
    r5[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[5]
    abus[31..0] = r5[31..0] output enabled when aareg[5]
    bbus[31..0] = r5[31..0] output enabled when bbreg[5]
    
    // Register r6, data
    r6[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[6]
    abus[31..0] = r6[31..0] output enabled when aareg[6]
    bbus[31..0] = r6[31..0] output enabled when bbreg[6]
    
    // Register r7, data
    r7[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[7]
    abus[31..0] = r7[31..0] output enabled when aareg[7]
    bbus[31..0] = r7[31..0] output enabled when bbreg[7]
    
    // Register r8, data
    r8[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[8]
    abus[31..0] = r8[31..0] output enabled when aareg[8]
    bbus[31..0] = r8[31..0] output enabled when bbreg[8]
    
    // Register r9, data
    r9[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[9]
    abus[31..0] = r9[31..0] output enabled when aareg[9]
    bbus[31..0] = r9[31..0] output enabled when bbreg[9]
    
    // Register r20, always equal to one
    abus[31..0] = "00000000000000000000000000000001" output enabled when aareg[20]
    bbus[31..0] = "00000000000000000000000000000001" output enabled when bbreg[20]
    
    // Register r21, temporary register
    r21[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[21]
    abus[31..0] = r21[31..0] output enabled when aareg[21]
    bbus[31..0] = r21[31..0] output enabled when bbreg[21]
    
    // Register ret, return address
    ret[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[28]
    abus[31..0] = ret[31..0] output enabled when aareg[28]
    bbus[31..0] = ret[31..0] output enabled when bbreg[28]
    
    // Register sp, stack pointer register
    sp[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[29]
    abus[31..0] = sp[31..0] output enabled when aareg[29]
    bbus[31..0] = sp[31..0] output enabled when bbreg[29]
    
    // Register pc, ordinal counter
    pc[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[30]
    abus[31..0] = pc[31..0] output enabled when aareg[30]
    bbus[31..0] = pc[31..0] output enabled when bbreg[30]
    
    // Register ir, instruction register
    ir[31..0] := dbus[31..0] on clk, reset when rst, enabled when ddreg[31]
    abus[31..0] = ir[31..0] output enabled when aareg[31]
    bbus[31..0] = ir[31..0] output enabled when bbreg[31]

end module